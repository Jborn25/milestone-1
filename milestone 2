def find_splice(dna_motif, dna):
    index = [] # beginnning list that will return later
    m = 0 #what use to advance dna after finding motif
    print(dna_motif)
    print(dna)
    for i in range (0,len(dna)):
        if dna[i] == dna_motif[m]:
            index.append(i)
            m += 1 # when find first index, check for second letter in rest of dna string
        if len(index) == len(dna_motif): # once do all of dna_motif, stop
            break
    return index
#test1 = find_splice('GTTT', "TGCATGCATGCACCCA")
#result1 = [2, 6, 8]
#print(test1)


def inall(string, dlist): # use this funct. to see if dna_string is in all of the dnas in the list
    check = 0
    true = True
    false = False
    for i in range (0,len(dlist)):
        if string in dlist[i]:
            check += 1
    if check == len(dlist):
        return true
    else: 
        return false
def shared_motif(dna_list):
    motif = '' # initializing values
    m = 0
    n = 1
    for i in range (0,len(dna_list)*len(dna_list[0])): # stopping point at max
        dna_string = dna_list[0][m:n] # creating string from first item in list with index m to n
        if inall(dna_string, dna_list) == True: # checking if string is in all items
            if len(dna_string) > len(motif): # checking if new motif is bigger than current motif
                motif = dna_string # setting new motif equal to current string if bigger
            if n < len(dna_list[0]): # checking that n isnt entire list
                n += 1 # moving up index
        elif inall(dna_string, dna_list) == False: # if string isnt in items,
            m += 1 # first letter of string index moves up one
            n = m + 1
    return motif
#test = shared_motif(["AGAGAGAGAGAGAGAGAGAGAGAGAGAGAGAGA","CGCGCGCG", "TTTTTTTT", "CGCGCG"])
#print(test)

def get_edges(dna_dict):
    walls = []
    # seperate dict into keys and values
    # check if first three letters of any values correspond to last three letters of any others
    # if they do, pair corresponding keys and append to walls
    return walls

def assemble_genome_in_order(dna_list):
    superstr = ''#initialize value
    superpos = ''#superstr possibility
    first = dna_list[0] # set to first part of segment; originally first item in list, later first combined sections
    for t in range (1,len(dna_list)): 
        superpos = 'nice' #use this arbritary value to test if loop has completed later
        for x in range (0,len(dna_list[t])):
            if first[-x:len(first)] == dna_list[t][0:x]: #tests if beginnings and ends are same, continues until reaches length of entire item
                   superpos = first[:-x] + dna_list[t] #combines if they are the same
                   superstr = superpos
            if x == len(dna_list[t]) - 1 and superpos == 'nice': # if loop has finished and no segments were the same
                superpos = first + dna_list[t] # adds segment to end of code
                superstr = superpos
                first = superstr
            if x == len(dna_list[t]) - 1: #once the loop finishes, first is set to the superstr to be used in the next loop with the next item in the list
                first = superstr
    return superstr
#ok so this works, but only if the dna list has the items in the order they should be combined in
#so maybe there could be a way to arrange the list before going thru the code? then it'd work,
#but i have no idea how you could do that. shucks.
#ORRRRR i add some loop in the beginning that tests this for every possible arrangement of items???/
#that should work!!! still don't know how to do that though lol
#YES I DO

def assemble_genome(dna_list):
    import itertools
    superstr = ''
    for i in range (0,len(dna_list)): #creates longest possible string to use in test later
        superstr = superstr + dna_list[i]
    for x in itertools.permutations(dna_list): #creates every possible arrangement of items
        superpos = assemble_genome_in_order(x) #finds superstr for specific order
        if len(superpos) < len(superstr): #finds which superstr posibility is shortest
            superstr = superpos
    return superstr
    
test = assemble_genome(["tupperwaareaa",'never',"aareaafiftyone",])
print(test)


def perfect_match(rna):
    A = rna.count('A') # counting the number of each symbol and assigning to corresponding variable
    U = rna.count('U')
    G = rna.count('G')
    C = rna.count('C')
    matches = 0 # initializing values
    if A == U and G == C: #checking if a perfect match is possible from equal number of corresponding symbols
        import math
        matches = math.factorial(A) * math.factorial(C) # calculating number of mathces; combos of u and a times combos of c and g
    else:
        matches = 0 # if unequal number of corresponding variables, no perfect match possible
    return matches
#test = perfect_match("CACUAGUGCGAU")
#print(test)

def reverse_complement(dna): # function from milestone 1
    reverse = dna[::-1] # reversing dna string
    rna = ''
    for symbol in reverse:
        if symbol == 'A': #changing dna symbol to corresponding rna symbol
            rna = rna + 'T'
        elif symbol == 'C':
            rna = rna + 'G'
        elif symbol == 'T':
            rna = rna + 'A'
        elif symbol == 'G':
            rna = rna + 'C'
    return rna
def rev_palindrome(dna):
    tuples = []
    m = 0
    n = 1
    for i in range (0, len(dna)**2): # stopping point at max
        dna_string = dna[m:n] # creating string from dna in list with index m to n
        if dna_string == reverse_complement(dna_string): # checking if string is reverse palindrome
            if len(dna_string) > 3 and 12 > len(dna_string): # making sure length from 3 to 12
                tuples.append((m,len(dna_string))) # adds new tuple to list
        if n == len(dna): # once string is full length of dna,
            m += 1 # move up first letter and start process over
            n = m + 1
        n += 1 # increasing length of string by one
    return tuples
#test = reverse_palindrome("AACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC")
#result = [(8, 4), (25, 4)] 
#print(test == result)

def random_genome(dna,gc_content):
    import math
    dna.upper()
    result = []
    L = len(dna)
    k = 0
    for i in dna:
        if (i=="A") or (i=="T"):
            k+=1
    def f_CG(x):
        return x/2
    def f_AT(x):
        return (1-x)/2
    for v in gc_content:
        P = f_AT(v)**k * f_CG(v)**(L-k)
        logP = math.log(P,10)
        result.append(logP)
    return result
